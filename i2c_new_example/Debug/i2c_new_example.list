
i2c_new_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a70  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08000b30  08000b30  00010b30  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000c3c  08000c3c  00010c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000c40  08000c40  00010c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001d0  20000000  08000c44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  200001d0  08000e14  000201d0  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  200001f4  08000e14  000201f4  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001049  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000316  00000000  00000000  00021241  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000090  00000000  00000000  00021558  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000215e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000067c  00000000  00000000  00021650  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000077d  00000000  00000000  00021ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00022449  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000002ec  00000000  00000000  000224c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  000227b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d0 	.word	0x200001d0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000b18 	.word	0x08000b18

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d4 	.word	0x200001d4
 8000104:	08000b18 	.word	0x08000b18

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <configure_clock>:





void configure_clock(){
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0

	/*  enable power clock  (step:1) */
	RCC->APB1ENR |= (RCC_APB1ENR_PWREN);
 8000224:	4b2b      	ldr	r3, [pc, #172]	; (80002d4 <configure_clock+0xb4>)
 8000226:	4a2b      	ldr	r2, [pc, #172]	; (80002d4 <configure_clock+0xb4>)
 8000228:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800022a:	2180      	movs	r1, #128	; 0x80
 800022c:	0549      	lsls	r1, r1, #21
 800022e:	430a      	orrs	r2, r1
 8000230:	639a      	str	r2, [r3, #56]	; 0x38

	/*PWR->CR = (PWR->CR & ~(PWR_CR_VOS)) | PWR_CR_VOS_0; (voltage scaling for low power)*/

	/* Enable HSI divided by 4 in RCC-> CR (step:2) */  // after change divided value for test

	RCC->CR |=(RCC_CR_HSIDIVEN  );               //HSI divider(16Mhz) by 4
 8000232:	4b28      	ldr	r3, [pc, #160]	; (80002d4 <configure_clock+0xb4>)
 8000234:	4a27      	ldr	r2, [pc, #156]	; (80002d4 <configure_clock+0xb4>)
 8000236:	6812      	ldr	r2, [r2, #0]
 8000238:	2108      	movs	r1, #8
 800023a:	430a      	orrs	r2, r1
 800023c:	601a      	str	r2, [r3, #0]
	RCC->CR |=(RCC_CR_HSION  );					//16 MHz high-speed internal clock enable
 800023e:	4b25      	ldr	r3, [pc, #148]	; (80002d4 <configure_clock+0xb4>)
 8000240:	4a24      	ldr	r2, [pc, #144]	; (80002d4 <configure_clock+0xb4>)
 8000242:	6812      	ldr	r2, [r2, #0]
 8000244:	2101      	movs	r1, #1
 8000246:	430a      	orrs	r2, r1
 8000248:	601a      	str	r2, [r3, #0]


	// Wait for HSI ready flag and HSIDIV flag (HSI16RDY goes low after 6 HSI16 clock cycles.)
	while ((RCC->CR & (RCC_CR_HSIRDY |RCC_CR_HSIDIVF)) != (RCC_CR_HSIRDY |RCC_CR_HSIDIVF)); /* (4) */
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	4b21      	ldr	r3, [pc, #132]	; (80002d4 <configure_clock+0xb4>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	2214      	movs	r2, #20
 8000252:	4013      	ands	r3, r2
 8000254:	2b14      	cmp	r3, #20
 8000256:	d1f9      	bne.n	800024c <configure_clock+0x2c>

	/* Set PLL on HSI, multiply by 8 and divided by 2(step:3) */

	RCC->CFGR |= RCC_CFGR_PLLSRC_HSI ;          //PLL entry clock source
 8000258:	4b1e      	ldr	r3, [pc, #120]	; (80002d4 <configure_clock+0xb4>)
 800025a:	4a1e      	ldr	r2, [pc, #120]	; (80002d4 <configure_clock+0xb4>)
 800025c:	68d2      	ldr	r2, [r2, #12]
 800025e:	60da      	str	r2, [r3, #12]
	RCC->CFGR |= RCC_CFGR_PLLMUL8;				//PLLVCO = PLL clock entry x 8
 8000260:	4b1c      	ldr	r3, [pc, #112]	; (80002d4 <configure_clock+0xb4>)
 8000262:	4a1c      	ldr	r2, [pc, #112]	; (80002d4 <configure_clock+0xb4>)
 8000264:	68d2      	ldr	r2, [r2, #12]
 8000266:	21c0      	movs	r1, #192	; 0xc0
 8000268:	0309      	lsls	r1, r1, #12
 800026a:	430a      	orrs	r2, r1
 800026c:	60da      	str	r2, [r3, #12]
	RCC->CFGR |= RCC_CFGR_PLLDIV2;				//PLL clock output = PLLVCO / 2
 800026e:	4b19      	ldr	r3, [pc, #100]	; (80002d4 <configure_clock+0xb4>)
 8000270:	4a18      	ldr	r2, [pc, #96]	; (80002d4 <configure_clock+0xb4>)
 8000272:	68d2      	ldr	r2, [r2, #12]
 8000274:	2180      	movs	r1, #128	; 0x80
 8000276:	03c9      	lsls	r1, r1, #15
 8000278:	430a      	orrs	r2, r1
 800027a:	60da      	str	r2, [r3, #12]

	/*Enable the PLL in RCC_CR register */
	RCC->CR |= RCC_CR_PLLON;
 800027c:	4b15      	ldr	r3, [pc, #84]	; (80002d4 <configure_clock+0xb4>)
 800027e:	4a15      	ldr	r2, [pc, #84]	; (80002d4 <configure_clock+0xb4>)
 8000280:	6812      	ldr	r2, [r2, #0]
 8000282:	2180      	movs	r1, #128	; 0x80
 8000284:	0449      	lsls	r1, r1, #17
 8000286:	430a      	orrs	r2, r1
 8000288:	601a      	str	r2, [r3, #0]

	/*  Wait for PLL ready flag */
	 while ((RCC->CR & RCC_CR_PLLRDY)  == 0);
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <configure_clock+0xb4>)
 800028e:	681a      	ldr	r2, [r3, #0]
 8000290:	2380      	movs	r3, #128	; 0x80
 8000292:	049b      	lsls	r3, r3, #18
 8000294:	4013      	ands	r3, r2
 8000296:	d0f9      	beq.n	800028c <configure_clock+0x6c>

	/*  Select PLL as system clock */
	 RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000298:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <configure_clock+0xb4>)
 800029a:	4a0e      	ldr	r2, [pc, #56]	; (80002d4 <configure_clock+0xb4>)
 800029c:	68d2      	ldr	r2, [r2, #12]
 800029e:	2103      	movs	r1, #3
 80002a0:	430a      	orrs	r2, r1
 80002a2:	60da      	str	r2, [r3, #12]


	/* Select PLL as system clock */
	 while ((RCC->CFGR & RCC_CFGR_SWS_PLL)  == 0);
 80002a4:	46c0      	nop			; (mov r8, r8)
 80002a6:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <configure_clock+0xb4>)
 80002a8:	68db      	ldr	r3, [r3, #12]
 80002aa:	220c      	movs	r2, #12
 80002ac:	4013      	ands	r3, r2
 80002ae:	d0fa      	beq.n	80002a6 <configure_clock+0x86>
/*-------------------Configure the clock source to be used to drive the System clock------*/
	 RCC->CFGR |= RCC_CFGR_HPRE_DIV1;    		/* SYSCLK not divided (AHB prescaler=1)*/
 80002b0:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <configure_clock+0xb4>)
 80002b2:	4a08      	ldr	r2, [pc, #32]	; (80002d4 <configure_clock+0xb4>)
 80002b4:	68d2      	ldr	r2, [r2, #12]
 80002b6:	60da      	str	r2, [r3, #12]

	 RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;          /* HCLK not divided(APB1 prescaler=1)*/
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <configure_clock+0xb4>)
 80002ba:	4a06      	ldr	r2, [pc, #24]	; (80002d4 <configure_clock+0xb4>)
 80002bc:	68d2      	ldr	r2, [r2, #12]
 80002be:	60da      	str	r2, [r3, #12]

	// RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;			/* HCLK not divided(APB2 prescaler=1)*/

/*-----------------------------------------------------------------------------------------*/

	 RCC->CICR |= RCC_CICR_HSIRDYC;             /* HSI16 ready Interrupt clear*/
 80002c0:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <configure_clock+0xb4>)
 80002c2:	4a04      	ldr	r2, [pc, #16]	; (80002d4 <configure_clock+0xb4>)
 80002c4:	6992      	ldr	r2, [r2, #24]
 80002c6:	2104      	movs	r1, #4
 80002c8:	430a      	orrs	r2, r1
 80002ca:	619a      	str	r2, [r3, #24]



}
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)
 80002d4:	40021000 	.word	0x40021000

080002d8 <configure_gpio>:




void configure_gpio(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0

	RCC->IOPENR |= RCC_IOPENR_IOPAEN;			// GPIOA clock enable
 80002dc:	4b20      	ldr	r3, [pc, #128]	; (8000360 <configure_gpio+0x88>)
 80002de:	4a20      	ldr	r2, [pc, #128]	; (8000360 <configure_gpio+0x88>)
 80002e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80002e2:	2101      	movs	r1, #1
 80002e4:	430a      	orrs	r2, r1
 80002e6:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC->IOPENR |= RCC_IOPENR_IOPBEN;			// GPIOB clock enable
 80002e8:	4b1d      	ldr	r3, [pc, #116]	; (8000360 <configure_gpio+0x88>)
 80002ea:	4a1d      	ldr	r2, [pc, #116]	; (8000360 <configure_gpio+0x88>)
 80002ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80002ee:	2102      	movs	r1, #2
 80002f0:	430a      	orrs	r2, r1
 80002f2:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC->IOPENR |= RCC_IOPENR_IOPCEN;			// GPIOC clock enable
 80002f4:	4b1a      	ldr	r3, [pc, #104]	; (8000360 <configure_gpio+0x88>)
 80002f6:	4a1a      	ldr	r2, [pc, #104]	; (8000360 <configure_gpio+0x88>)
 80002f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80002fa:	2104      	movs	r1, #4
 80002fc:	430a      	orrs	r2, r1
 80002fe:	62da      	str	r2, [r3, #44]	; 0x2c



	GPIOA->MODER &= ~GPIO_MODER_MODE5;          // clean register for reset state(MOD5_REG=11)
 8000300:	23a0      	movs	r3, #160	; 0xa0
 8000302:	05db      	lsls	r3, r3, #23
 8000304:	22a0      	movs	r2, #160	; 0xa0
 8000306:	05d2      	lsls	r2, r2, #23
 8000308:	6812      	ldr	r2, [r2, #0]
 800030a:	4916      	ldr	r1, [pc, #88]	; (8000364 <configure_gpio+0x8c>)
 800030c:	400a      	ands	r2, r1
 800030e:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= GPIO_MODER_MODE5_0;         //just mode5 first bit set 1, general purpose output mode
 8000310:	23a0      	movs	r3, #160	; 0xa0
 8000312:	05db      	lsls	r3, r3, #23
 8000314:	22a0      	movs	r2, #160	; 0xa0
 8000316:	05d2      	lsls	r2, r2, #23
 8000318:	6812      	ldr	r2, [r2, #0]
 800031a:	2180      	movs	r1, #128	; 0x80
 800031c:	00c9      	lsls	r1, r1, #3
 800031e:	430a      	orrs	r2, r1
 8000320:	601a      	str	r2, [r3, #0]


	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEED5_1;  // port_a output speed to high speed(10)
 8000322:	23a0      	movs	r3, #160	; 0xa0
 8000324:	05db      	lsls	r3, r3, #23
 8000326:	22a0      	movs	r2, #160	; 0xa0
 8000328:	05d2      	lsls	r2, r2, #23
 800032a:	6892      	ldr	r2, [r2, #8]
 800032c:	2180      	movs	r1, #128	; 0x80
 800032e:	0109      	lsls	r1, r1, #4
 8000330:	430a      	orrs	r2, r1
 8000332:	609a      	str	r2, [r3, #8]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEED5_1;  // port_c output speed to high speed(10)
 8000334:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <configure_gpio+0x90>)
 8000336:	4a0c      	ldr	r2, [pc, #48]	; (8000368 <configure_gpio+0x90>)
 8000338:	6892      	ldr	r2, [r2, #8]
 800033a:	2180      	movs	r1, #128	; 0x80
 800033c:	0109      	lsls	r1, r1, #4
 800033e:	430a      	orrs	r2, r1
 8000340:	609a      	str	r2, [r3, #8]





	GPIOC->MODER &= ~GPIO_MODER_MODE13;	        // clean register for reset state(MOD5_REG=11)
 8000342:	4b09      	ldr	r3, [pc, #36]	; (8000368 <configure_gpio+0x90>)
 8000344:	4a08      	ldr	r2, [pc, #32]	; (8000368 <configure_gpio+0x90>)
 8000346:	6812      	ldr	r2, [r2, #0]
 8000348:	4908      	ldr	r1, [pc, #32]	; (800036c <configure_gpio+0x94>)
 800034a:	400a      	ands	r2, r1
 800034c:	601a      	str	r2, [r3, #0]
	//GPIOC->MODER |= 0x41555555UL;		        // input for c13-c14

	GPIOC->MODER &= ~GPIO_MODER_MODE12;	        // clean register for reset state(MOD5_REG=11)
 800034e:	4b06      	ldr	r3, [pc, #24]	; (8000368 <configure_gpio+0x90>)
 8000350:	4a05      	ldr	r2, [pc, #20]	; (8000368 <configure_gpio+0x90>)
 8000352:	6812      	ldr	r2, [r2, #0]
 8000354:	4906      	ldr	r1, [pc, #24]	; (8000370 <configure_gpio+0x98>)
 8000356:	400a      	ands	r2, r1
 8000358:	601a      	str	r2, [r3, #0]
	//GPIOC->MODER |= 0x41555555UL;				// input for c13-c14



}
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	40021000 	.word	0x40021000
 8000364:	fffff3ff 	.word	0xfffff3ff
 8000368:	50000800 	.word	0x50000800
 800036c:	f3ffffff 	.word	0xf3ffffff
 8000370:	fcffffff 	.word	0xfcffffff

08000374 <configure_i2c2>:



void configure_i2c2(void)                  //for pin_b7(SDA)-pin_b6(SCL)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	/*-----------------------------i2c GPIO pin set--------------------------------------------*/
        RCC->IOPENR |= RCC_IOPENR_IOPBEN;			// GPIOB clock enable
 8000378:	4bad      	ldr	r3, [pc, #692]	; (8000630 <configure_i2c2+0x2bc>)
 800037a:	4aad      	ldr	r2, [pc, #692]	; (8000630 <configure_i2c2+0x2bc>)
 800037c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800037e:	2102      	movs	r1, #2
 8000380:	430a      	orrs	r2, r1
 8000382:	62da      	str	r2, [r3, #44]	; 0x2c




		GPIOB->MODER &=~GPIO_MODER_MODE6_0;		//MOD register set alternate function
 8000384:	4bab      	ldr	r3, [pc, #684]	; (8000634 <configure_i2c2+0x2c0>)
 8000386:	4aab      	ldr	r2, [pc, #684]	; (8000634 <configure_i2c2+0x2c0>)
 8000388:	6812      	ldr	r2, [r2, #0]
 800038a:	49ab      	ldr	r1, [pc, #684]	; (8000638 <configure_i2c2+0x2c4>)
 800038c:	400a      	ands	r2, r1
 800038e:	601a      	str	r2, [r3, #0]
		GPIOB->MODER |=	GPIO_MODER_MODE6_1;		//MOD register set alternate function
 8000390:	4ba8      	ldr	r3, [pc, #672]	; (8000634 <configure_i2c2+0x2c0>)
 8000392:	4aa8      	ldr	r2, [pc, #672]	; (8000634 <configure_i2c2+0x2c0>)
 8000394:	6812      	ldr	r2, [r2, #0]
 8000396:	2180      	movs	r1, #128	; 0x80
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	430a      	orrs	r2, r1
 800039c:	601a      	str	r2, [r3, #0]
		GPIOB->MODER &=~GPIO_MODER_MODE7_0;		//MOD register set alternate function
 800039e:	4ba5      	ldr	r3, [pc, #660]	; (8000634 <configure_i2c2+0x2c0>)
 80003a0:	4aa4      	ldr	r2, [pc, #656]	; (8000634 <configure_i2c2+0x2c0>)
 80003a2:	6812      	ldr	r2, [r2, #0]
 80003a4:	49a5      	ldr	r1, [pc, #660]	; (800063c <configure_i2c2+0x2c8>)
 80003a6:	400a      	ands	r2, r1
 80003a8:	601a      	str	r2, [r3, #0]
		GPIOB->MODER |=	GPIO_MODER_MODE7_1;		//MOD register set alternate function
 80003aa:	4ba2      	ldr	r3, [pc, #648]	; (8000634 <configure_i2c2+0x2c0>)
 80003ac:	4aa1      	ldr	r2, [pc, #644]	; (8000634 <configure_i2c2+0x2c0>)
 80003ae:	6812      	ldr	r2, [r2, #0]
 80003b0:	2180      	movs	r1, #128	; 0x80
 80003b2:	0209      	lsls	r1, r1, #8
 80003b4:	430a      	orrs	r2, r1
 80003b6:	601a      	str	r2, [r3, #0]

		GPIOB->OTYPER |=GPIO_OTYPER_OT_6; 			//type register open drain
 80003b8:	4b9e      	ldr	r3, [pc, #632]	; (8000634 <configure_i2c2+0x2c0>)
 80003ba:	4a9e      	ldr	r2, [pc, #632]	; (8000634 <configure_i2c2+0x2c0>)
 80003bc:	6852      	ldr	r2, [r2, #4]
 80003be:	2140      	movs	r1, #64	; 0x40
 80003c0:	430a      	orrs	r2, r1
 80003c2:	605a      	str	r2, [r3, #4]
		GPIOB->OTYPER |=GPIO_OTYPER_OT_7;			//type register open drain
 80003c4:	4b9b      	ldr	r3, [pc, #620]	; (8000634 <configure_i2c2+0x2c0>)
 80003c6:	4a9b      	ldr	r2, [pc, #620]	; (8000634 <configure_i2c2+0x2c0>)
 80003c8:	6852      	ldr	r2, [r2, #4]
 80003ca:	2180      	movs	r1, #128	; 0x80
 80003cc:	430a      	orrs	r2, r1
 80003ce:	605a      	str	r2, [r3, #4]

		GPIOB->OSPEEDR &=~GPIO_OSPEEDER_OSPEED6_0;	//output speed low
 80003d0:	4b98      	ldr	r3, [pc, #608]	; (8000634 <configure_i2c2+0x2c0>)
 80003d2:	4a98      	ldr	r2, [pc, #608]	; (8000634 <configure_i2c2+0x2c0>)
 80003d4:	6892      	ldr	r2, [r2, #8]
 80003d6:	4998      	ldr	r1, [pc, #608]	; (8000638 <configure_i2c2+0x2c4>)
 80003d8:	400a      	ands	r2, r1
 80003da:	609a      	str	r2, [r3, #8]
		GPIOB->OSPEEDR &=~GPIO_OSPEEDER_OSPEED7_0; //output speed low
 80003dc:	4b95      	ldr	r3, [pc, #596]	; (8000634 <configure_i2c2+0x2c0>)
 80003de:	4a95      	ldr	r2, [pc, #596]	; (8000634 <configure_i2c2+0x2c0>)
 80003e0:	6892      	ldr	r2, [r2, #8]
 80003e2:	4996      	ldr	r1, [pc, #600]	; (800063c <configure_i2c2+0x2c8>)
 80003e4:	400a      	ands	r2, r1
 80003e6:	609a      	str	r2, [r3, #8]


		GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD6;			//No pull-up, pull-down register
 80003e8:	4b92      	ldr	r3, [pc, #584]	; (8000634 <configure_i2c2+0x2c0>)
 80003ea:	4a92      	ldr	r2, [pc, #584]	; (8000634 <configure_i2c2+0x2c0>)
 80003ec:	68d2      	ldr	r2, [r2, #12]
 80003ee:	4994      	ldr	r1, [pc, #592]	; (8000640 <configure_i2c2+0x2cc>)
 80003f0:	400a      	ands	r2, r1
 80003f2:	60da      	str	r2, [r3, #12]
		GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD7;			//No pull-up, pull-down register
 80003f4:	4b8f      	ldr	r3, [pc, #572]	; (8000634 <configure_i2c2+0x2c0>)
 80003f6:	4a8f      	ldr	r2, [pc, #572]	; (8000634 <configure_i2c2+0x2c0>)
 80003f8:	68d2      	ldr	r2, [r2, #12]
 80003fa:	4992      	ldr	r1, [pc, #584]	; (8000644 <configure_i2c2+0x2d0>)
 80003fc:	400a      	ands	r2, r1
 80003fe:	60da      	str	r2, [r3, #12]

		GPIOB->AFR[0] = 0b00010001000000000000000000000000; 	//set alternate function
 8000400:	4b8c      	ldr	r3, [pc, #560]	; (8000634 <configure_i2c2+0x2c0>)
 8000402:	2288      	movs	r2, #136	; 0x88
 8000404:	0552      	lsls	r2, r2, #21
 8000406:	621a      	str	r2, [r3, #32]

	/*-----------------------------------------------------------------------------------------*/

		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;         //i2c2 enable
 8000408:	4b89      	ldr	r3, [pc, #548]	; (8000630 <configure_i2c2+0x2bc>)
 800040a:	4a89      	ldr	r2, [pc, #548]	; (8000630 <configure_i2c2+0x2bc>)
 800040c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800040e:	2180      	movs	r1, #128	; 0x80
 8000410:	03c9      	lsls	r1, r1, #15
 8000412:	430a      	orrs	r2, r1
 8000414:	639a      	str	r2, [r3, #56]	; 0x38
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;			//i2c1 enable
 8000416:	4b86      	ldr	r3, [pc, #536]	; (8000630 <configure_i2c2+0x2bc>)
 8000418:	4a85      	ldr	r2, [pc, #532]	; (8000630 <configure_i2c2+0x2bc>)
 800041a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800041c:	2180      	movs	r1, #128	; 0x80
 800041e:	0389      	lsls	r1, r1, #14
 8000420:	430a      	orrs	r2, r1
 8000422:	639a      	str	r2, [r3, #56]	; 0x38

		I2C1->TIMINGR = (uint32_t)0x00300619; 		//timing register value for 16Mhz i2c clock
 8000424:	4b88      	ldr	r3, [pc, #544]	; (8000648 <configure_i2c2+0x2d4>)
 8000426:	4a89      	ldr	r2, [pc, #548]	; (800064c <configure_i2c2+0x2d8>)
 8000428:	611a      	str	r2, [r3, #16]

		I2C1-> CR1 |= I2C_CR1_PE;					//i2c1 peripheral enable
 800042a:	4b87      	ldr	r3, [pc, #540]	; (8000648 <configure_i2c2+0x2d4>)
 800042c:	4a86      	ldr	r2, [pc, #536]	; (8000648 <configure_i2c2+0x2d4>)
 800042e:	6812      	ldr	r2, [r2, #0]
 8000430:	2101      	movs	r1, #1
 8000432:	430a      	orrs	r2, r1
 8000434:	601a      	str	r2, [r3, #0]
/*----------------------------------------FIRST STEP(write on epprom mem.adr)---------------------------*/


		I2C1->CR2 |= 0xA0;						// slave device addres
 8000436:	4b84      	ldr	r3, [pc, #528]	; (8000648 <configure_i2c2+0x2d4>)
 8000438:	4a83      	ldr	r2, [pc, #524]	; (8000648 <configure_i2c2+0x2d4>)
 800043a:	6852      	ldr	r2, [r2, #4]
 800043c:	21a0      	movs	r1, #160	; 0xa0
 800043e:	430a      	orrs	r2, r1
 8000440:	605a      	str	r2, [r3, #4]

		I2C1->CR2 &=~I2C_CR2_RD_WRN ;			// Master requests a write transfer.
 8000442:	4b81      	ldr	r3, [pc, #516]	; (8000648 <configure_i2c2+0x2d4>)
 8000444:	4a80      	ldr	r2, [pc, #512]	; (8000648 <configure_i2c2+0x2d4>)
 8000446:	6852      	ldr	r2, [r2, #4]
 8000448:	4981      	ldr	r1, [pc, #516]	; (8000650 <configure_i2c2+0x2dc>)
 800044a:	400a      	ands	r2, r1
 800044c:	605a      	str	r2, [r3, #4]

		I2C1->CR2 &=~I2C_CR2_ADD10;			    // set adressing 7 bits
 800044e:	4b7e      	ldr	r3, [pc, #504]	; (8000648 <configure_i2c2+0x2d4>)
 8000450:	4a7d      	ldr	r2, [pc, #500]	; (8000648 <configure_i2c2+0x2d4>)
 8000452:	6852      	ldr	r2, [r2, #4]
 8000454:	497f      	ldr	r1, [pc, #508]	; (8000654 <configure_i2c2+0x2e0>)
 8000456:	400a      	ands	r2, r1
 8000458:	605a      	str	r2, [r3, #4]

		I2C1->CR2 |= 0x30000;					// set send byte value=1
 800045a:	4b7b      	ldr	r3, [pc, #492]	; (8000648 <configure_i2c2+0x2d4>)
 800045c:	4a7a      	ldr	r2, [pc, #488]	; (8000648 <configure_i2c2+0x2d4>)
 800045e:	6852      	ldr	r2, [r2, #4]
 8000460:	21c0      	movs	r1, #192	; 0xc0
 8000462:	0289      	lsls	r1, r1, #10
 8000464:	430a      	orrs	r2, r1
 8000466:	605a      	str	r2, [r3, #4]

		I2C1->CR2 |=I2C_CR2_START;				//start generation
 8000468:	4b77      	ldr	r3, [pc, #476]	; (8000648 <configure_i2c2+0x2d4>)
 800046a:	4a77      	ldr	r2, [pc, #476]	; (8000648 <configure_i2c2+0x2d4>)
 800046c:	6852      	ldr	r2, [r2, #4]
 800046e:	2180      	movs	r1, #128	; 0x80
 8000470:	0189      	lsls	r1, r1, #6
 8000472:	430a      	orrs	r2, r1
 8000474:	605a      	str	r2, [r3, #4]



		while(!(I2C1->ISR & I2C_ISR_BUSY));		//control i2c busy?
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	4b73      	ldr	r3, [pc, #460]	; (8000648 <configure_i2c2+0x2d4>)
 800047a:	699a      	ldr	r2, [r3, #24]
 800047c:	2380      	movs	r3, #128	; 0x80
 800047e:	021b      	lsls	r3, r3, #8
 8000480:	4013      	ands	r3, r2
 8000482:	d0f9      	beq.n	8000478 <configure_i2c2+0x104>
		while(!(I2C1->ISR & I2C_ISR_TXE ));		//control TXD empty?
 8000484:	46c0      	nop			; (mov r8, r8)
 8000486:	4b70      	ldr	r3, [pc, #448]	; (8000648 <configure_i2c2+0x2d4>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	2201      	movs	r2, #1
 800048c:	4013      	ands	r3, r2
 800048e:	d0fa      	beq.n	8000486 <configure_i2c2+0x112>


		I2C1->TXDR = 0x00;						//send byte eeprom memory high address
 8000490:	4b6d      	ldr	r3, [pc, #436]	; (8000648 <configure_i2c2+0x2d4>)
 8000492:	2200      	movs	r2, #0
 8000494:	629a      	str	r2, [r3, #40]	; 0x28

		while(!(I2C1->ISR & I2C_ISR_BUSY));		//control i2c busy?
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	4b6b      	ldr	r3, [pc, #428]	; (8000648 <configure_i2c2+0x2d4>)
 800049a:	699a      	ldr	r2, [r3, #24]
 800049c:	2380      	movs	r3, #128	; 0x80
 800049e:	021b      	lsls	r3, r3, #8
 80004a0:	4013      	ands	r3, r2
 80004a2:	d0f9      	beq.n	8000498 <configure_i2c2+0x124>
		while(!(I2C1->ISR & I2C_ISR_TXE ));		//control TXD empty?
 80004a4:	46c0      	nop			; (mov r8, r8)
 80004a6:	4b68      	ldr	r3, [pc, #416]	; (8000648 <configure_i2c2+0x2d4>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	2201      	movs	r2, #1
 80004ac:	4013      	ands	r3, r2
 80004ae:	d0fa      	beq.n	80004a6 <configure_i2c2+0x132>

		I2C1->TXDR = 0x64;						//send byte eeprom memory low address
 80004b0:	4b65      	ldr	r3, [pc, #404]	; (8000648 <configure_i2c2+0x2d4>)
 80004b2:	2264      	movs	r2, #100	; 0x64
 80004b4:	629a      	str	r2, [r3, #40]	; 0x28


		while(!(I2C1->ISR & I2C_ISR_BUSY));		//control i2c busy?
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	4b63      	ldr	r3, [pc, #396]	; (8000648 <configure_i2c2+0x2d4>)
 80004ba:	699a      	ldr	r2, [r3, #24]
 80004bc:	2380      	movs	r3, #128	; 0x80
 80004be:	021b      	lsls	r3, r3, #8
 80004c0:	4013      	ands	r3, r2
 80004c2:	d0f9      	beq.n	80004b8 <configure_i2c2+0x144>
		while(!(I2C1->ISR & I2C_ISR_TXE ));		//control TXD empty?
 80004c4:	46c0      	nop			; (mov r8, r8)
 80004c6:	4b60      	ldr	r3, [pc, #384]	; (8000648 <configure_i2c2+0x2d4>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	2201      	movs	r2, #1
 80004cc:	4013      	ands	r3, r2
 80004ce:	d0fa      	beq.n	80004c6 <configure_i2c2+0x152>


		I2C1->TXDR = 0x37;						//send '7' caracter
 80004d0:	4b5d      	ldr	r3, [pc, #372]	; (8000648 <configure_i2c2+0x2d4>)
 80004d2:	2237      	movs	r2, #55	; 0x37
 80004d4:	629a      	str	r2, [r3, #40]	; 0x28




		while(!(I2C1->ISR & I2C_ISR_TXE ));		//control TXD empty
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	4b5b      	ldr	r3, [pc, #364]	; (8000648 <configure_i2c2+0x2d4>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	2201      	movs	r2, #1
 80004de:	4013      	ands	r3, r2
 80004e0:	d0fa      	beq.n	80004d8 <configure_i2c2+0x164>
		while(!(I2C1->ISR & I2C_ISR_BUSY));
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	4b58      	ldr	r3, [pc, #352]	; (8000648 <configure_i2c2+0x2d4>)
 80004e6:	699a      	ldr	r2, [r3, #24]
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	021b      	lsls	r3, r3, #8
 80004ec:	4013      	ands	r3, r2
 80004ee:	d0f9      	beq.n	80004e4 <configure_i2c2+0x170>
		while(!(I2C1->ISR & I2C_ISR_TC) );		//wait for NBYTES data have been transferred
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	4b55      	ldr	r3, [pc, #340]	; (8000648 <configure_i2c2+0x2d4>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	2240      	movs	r2, #64	; 0x40
 80004f8:	4013      	ands	r3, r2
 80004fa:	d0fa      	beq.n	80004f2 <configure_i2c2+0x17e>




/*----------------------------------SECOND STEP(read eeprom mem. addr.)---------------------*/
		I2C1->CR2 |= 0xA0;						// slave device addres
 80004fc:	4b52      	ldr	r3, [pc, #328]	; (8000648 <configure_i2c2+0x2d4>)
 80004fe:	4a52      	ldr	r2, [pc, #328]	; (8000648 <configure_i2c2+0x2d4>)
 8000500:	6852      	ldr	r2, [r2, #4]
 8000502:	21a0      	movs	r1, #160	; 0xa0
 8000504:	430a      	orrs	r2, r1
 8000506:	605a      	str	r2, [r3, #4]

		I2C1->CR2 &=~I2C_CR2_RD_WRN ;			// Master requests a write transfer.
 8000508:	4b4f      	ldr	r3, [pc, #316]	; (8000648 <configure_i2c2+0x2d4>)
 800050a:	4a4f      	ldr	r2, [pc, #316]	; (8000648 <configure_i2c2+0x2d4>)
 800050c:	6852      	ldr	r2, [r2, #4]
 800050e:	4950      	ldr	r1, [pc, #320]	; (8000650 <configure_i2c2+0x2dc>)
 8000510:	400a      	ands	r2, r1
 8000512:	605a      	str	r2, [r3, #4]

		I2C1->CR2 &=~I2C_CR2_ADD10;			    // set adressing 7 bits
 8000514:	4b4c      	ldr	r3, [pc, #304]	; (8000648 <configure_i2c2+0x2d4>)
 8000516:	4a4c      	ldr	r2, [pc, #304]	; (8000648 <configure_i2c2+0x2d4>)
 8000518:	6852      	ldr	r2, [r2, #4]
 800051a:	494e      	ldr	r1, [pc, #312]	; (8000654 <configure_i2c2+0x2e0>)
 800051c:	400a      	ands	r2, r1
 800051e:	605a      	str	r2, [r3, #4]

		I2C1->CR2 &=~0x30000;
 8000520:	4b49      	ldr	r3, [pc, #292]	; (8000648 <configure_i2c2+0x2d4>)
 8000522:	4a49      	ldr	r2, [pc, #292]	; (8000648 <configure_i2c2+0x2d4>)
 8000524:	6852      	ldr	r2, [r2, #4]
 8000526:	494c      	ldr	r1, [pc, #304]	; (8000658 <configure_i2c2+0x2e4>)
 8000528:	400a      	ands	r2, r1
 800052a:	605a      	str	r2, [r3, #4]
		I2C1->CR2 |= 0x20000;					// set send byte value=2
 800052c:	4b46      	ldr	r3, [pc, #280]	; (8000648 <configure_i2c2+0x2d4>)
 800052e:	4a46      	ldr	r2, [pc, #280]	; (8000648 <configure_i2c2+0x2d4>)
 8000530:	6852      	ldr	r2, [r2, #4]
 8000532:	2180      	movs	r1, #128	; 0x80
 8000534:	0289      	lsls	r1, r1, #10
 8000536:	430a      	orrs	r2, r1
 8000538:	605a      	str	r2, [r3, #4]

		I2C1->CR2 |=I2C_CR2_START;				//start generation
 800053a:	4b43      	ldr	r3, [pc, #268]	; (8000648 <configure_i2c2+0x2d4>)
 800053c:	4a42      	ldr	r2, [pc, #264]	; (8000648 <configure_i2c2+0x2d4>)
 800053e:	6852      	ldr	r2, [r2, #4]
 8000540:	2180      	movs	r1, #128	; 0x80
 8000542:	0189      	lsls	r1, r1, #6
 8000544:	430a      	orrs	r2, r1
 8000546:	605a      	str	r2, [r3, #4]

	/*--------------------------------------------------------------------------------------*/

		while(!(I2C1->ISR & I2C_ISR_BUSY));		//control i2c busy?
 8000548:	46c0      	nop			; (mov r8, r8)
 800054a:	4b3f      	ldr	r3, [pc, #252]	; (8000648 <configure_i2c2+0x2d4>)
 800054c:	699a      	ldr	r2, [r3, #24]
 800054e:	2380      	movs	r3, #128	; 0x80
 8000550:	021b      	lsls	r3, r3, #8
 8000552:	4013      	ands	r3, r2
 8000554:	d0f9      	beq.n	800054a <configure_i2c2+0x1d6>

		while(!(I2C1->ISR & I2C_ISR_TXE ));		//control TXD empty?
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	4b3b      	ldr	r3, [pc, #236]	; (8000648 <configure_i2c2+0x2d4>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	2201      	movs	r2, #1
 800055e:	4013      	ands	r3, r2
 8000560:	d0fa      	beq.n	8000558 <configure_i2c2+0x1e4>

		I2C1->TXDR = 0x00;						//send byte eeprom memory high address
 8000562:	4b39      	ldr	r3, [pc, #228]	; (8000648 <configure_i2c2+0x2d4>)
 8000564:	2200      	movs	r2, #0
 8000566:	629a      	str	r2, [r3, #40]	; 0x28



		//while(!(I2C1->ISR)& I2C_)             //read ack status

		while(!(I2C1->ISR & I2C_ISR_BUSY));		//control i2c busy?
 8000568:	46c0      	nop			; (mov r8, r8)
 800056a:	4b37      	ldr	r3, [pc, #220]	; (8000648 <configure_i2c2+0x2d4>)
 800056c:	699a      	ldr	r2, [r3, #24]
 800056e:	2380      	movs	r3, #128	; 0x80
 8000570:	021b      	lsls	r3, r3, #8
 8000572:	4013      	ands	r3, r2
 8000574:	d0f9      	beq.n	800056a <configure_i2c2+0x1f6>

		while(!(I2C1->ISR & I2C_ISR_TXE ));		//control TXD empty?
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	4b33      	ldr	r3, [pc, #204]	; (8000648 <configure_i2c2+0x2d4>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	2201      	movs	r2, #1
 800057e:	4013      	ands	r3, r2
 8000580:	d0fa      	beq.n	8000578 <configure_i2c2+0x204>


		I2C1->TXDR = 0x64;						//send byte eeprom memory low address
 8000582:	4b31      	ldr	r3, [pc, #196]	; (8000648 <configure_i2c2+0x2d4>)
 8000584:	2264      	movs	r2, #100	; 0x64
 8000586:	629a      	str	r2, [r3, #40]	; 0x28


		while(!(I2C1->ISR & I2C_ISR_BUSY));		//control i2c busy?
 8000588:	46c0      	nop			; (mov r8, r8)
 800058a:	4b2f      	ldr	r3, [pc, #188]	; (8000648 <configure_i2c2+0x2d4>)
 800058c:	699a      	ldr	r2, [r3, #24]
 800058e:	2380      	movs	r3, #128	; 0x80
 8000590:	021b      	lsls	r3, r3, #8
 8000592:	4013      	ands	r3, r2
 8000594:	d0f9      	beq.n	800058a <configure_i2c2+0x216>

		while(!(I2C1->ISR & I2C_ISR_TXE ));		//control TXD empty?
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	4b2b      	ldr	r3, [pc, #172]	; (8000648 <configure_i2c2+0x2d4>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	2201      	movs	r2, #1
 800059e:	4013      	ands	r3, r2
 80005a0:	d0fa      	beq.n	8000598 <configure_i2c2+0x224>


	/*--------------------------ReStart for read eeprom mem. addr---------------------------*/

		I2C1->CR2 |= 0xA0;						// slave device addres
 80005a2:	4b29      	ldr	r3, [pc, #164]	; (8000648 <configure_i2c2+0x2d4>)
 80005a4:	4a28      	ldr	r2, [pc, #160]	; (8000648 <configure_i2c2+0x2d4>)
 80005a6:	6852      	ldr	r2, [r2, #4]
 80005a8:	21a0      	movs	r1, #160	; 0xa0
 80005aa:	430a      	orrs	r2, r1
 80005ac:	605a      	str	r2, [r3, #4]

		I2C1->CR2 |= I2C_CR2_RD_WRN ;			// Master requests a read transfer.
 80005ae:	4b26      	ldr	r3, [pc, #152]	; (8000648 <configure_i2c2+0x2d4>)
 80005b0:	4a25      	ldr	r2, [pc, #148]	; (8000648 <configure_i2c2+0x2d4>)
 80005b2:	6852      	ldr	r2, [r2, #4]
 80005b4:	2180      	movs	r1, #128	; 0x80
 80005b6:	00c9      	lsls	r1, r1, #3
 80005b8:	430a      	orrs	r2, r1
 80005ba:	605a      	str	r2, [r3, #4]

		I2C1->CR2 &=~I2C_CR2_ADD10;				// set adressing 7 bits
 80005bc:	4b22      	ldr	r3, [pc, #136]	; (8000648 <configure_i2c2+0x2d4>)
 80005be:	4a22      	ldr	r2, [pc, #136]	; (8000648 <configure_i2c2+0x2d4>)
 80005c0:	6852      	ldr	r2, [r2, #4]
 80005c2:	4924      	ldr	r1, [pc, #144]	; (8000654 <configure_i2c2+0x2e0>)
 80005c4:	400a      	ands	r2, r1
 80005c6:	605a      	str	r2, [r3, #4]





		I2C1->CR2 &=~0x20000;					//clear NBYTES bit
 80005c8:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <configure_i2c2+0x2d4>)
 80005ca:	4a1f      	ldr	r2, [pc, #124]	; (8000648 <configure_i2c2+0x2d4>)
 80005cc:	6852      	ldr	r2, [r2, #4]
 80005ce:	4923      	ldr	r1, [pc, #140]	; (800065c <configure_i2c2+0x2e8>)
 80005d0:	400a      	ands	r2, r1
 80005d2:	605a      	str	r2, [r3, #4]
		I2C1->CR2 |= 0x10000;					// set to read value 1 byte
 80005d4:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <configure_i2c2+0x2d4>)
 80005d6:	4a1c      	ldr	r2, [pc, #112]	; (8000648 <configure_i2c2+0x2d4>)
 80005d8:	6852      	ldr	r2, [r2, #4]
 80005da:	2180      	movs	r1, #128	; 0x80
 80005dc:	0249      	lsls	r1, r1, #9
 80005de:	430a      	orrs	r2, r1
 80005e0:	605a      	str	r2, [r3, #4]


		I2C1->CR2 |=I2C_CR2_START;				//start generation
 80005e2:	4b19      	ldr	r3, [pc, #100]	; (8000648 <configure_i2c2+0x2d4>)
 80005e4:	4a18      	ldr	r2, [pc, #96]	; (8000648 <configure_i2c2+0x2d4>)
 80005e6:	6852      	ldr	r2, [r2, #4]
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	0189      	lsls	r1, r1, #6
 80005ec:	430a      	orrs	r2, r1
 80005ee:	605a      	str	r2, [r3, #4]



		//while(!(I2C1->ISR & I2C_ISR_BUSY));		//control i2c busy?

		while(!(I2C1->ISR & I2C_ISR_RXNE));		//rxne empty flag
 80005f0:	46c0      	nop			; (mov r8, r8)
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <configure_i2c2+0x2d4>)
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	2204      	movs	r2, #4
 80005f8:	4013      	ands	r3, r2
 80005fa:	d0fa      	beq.n	80005f2 <configure_i2c2+0x27e>

		receive_data_1 =atoi (&I2C1 -> RXDR);
 80005fc:	4b18      	ldr	r3, [pc, #96]	; (8000660 <configure_i2c2+0x2ec>)
 80005fe:	0018      	movs	r0, r3
 8000600:	f000 f9a4 	bl	800094c <atoi>
 8000604:	0003      	movs	r3, r0
 8000606:	b2da      	uxtb	r2, r3
 8000608:	4b16      	ldr	r3, [pc, #88]	; (8000664 <configure_i2c2+0x2f0>)
 800060a:	701a      	strb	r2, [r3, #0]

		I2C1->CR2 |= I2C_CR2_STOP;				//i2c1 stop
 800060c:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <configure_i2c2+0x2d4>)
 800060e:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <configure_i2c2+0x2d4>)
 8000610:	6852      	ldr	r2, [r2, #4]
 8000612:	2180      	movs	r1, #128	; 0x80
 8000614:	01c9      	lsls	r1, r1, #7
 8000616:	430a      	orrs	r2, r1
 8000618:	605a      	str	r2, [r3, #4]

		while(I2C1->CR2 & I2C_CR2_STOP);        //wait for start flag
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <configure_i2c2+0x2d4>)
 800061e:	685a      	ldr	r2, [r3, #4]
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	01db      	lsls	r3, r3, #7
 8000624:	4013      	ands	r3, r2
 8000626:	d1f9      	bne.n	800061c <configure_i2c2+0x2a8>

	/*--------------------------------------------------------------------------------------*/



}
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	40021000 	.word	0x40021000
 8000634:	50000400 	.word	0x50000400
 8000638:	ffffefff 	.word	0xffffefff
 800063c:	ffffbfff 	.word	0xffffbfff
 8000640:	ffffcfff 	.word	0xffffcfff
 8000644:	ffff3fff 	.word	0xffff3fff
 8000648:	40005400 	.word	0x40005400
 800064c:	00300619 	.word	0x00300619
 8000650:	fffffbff 	.word	0xfffffbff
 8000654:	fffff7ff 	.word	0xfffff7ff
 8000658:	fffcffff 	.word	0xfffcffff
 800065c:	fffdffff 	.word	0xfffdffff
 8000660:	40005424 	.word	0x40005424
 8000664:	200001ec 	.word	0x200001ec

08000668 <main>:




int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0

	configure_i2c2();                  //for pin_b7(SDA)-pin_b6(SCL)
 800066c:	f7ff fe82 	bl	8000374 <configure_i2c2>
	configure_gpio();
 8000670:	f7ff fe32 	bl	80002d8 <configure_gpio>
	configure_clock();
 8000674:	f7ff fdd4 	bl	8000220 <configure_clock>
	eeprom_read_adr();
 8000678:	f000 f856 	bl	8000728 <eeprom_read_adr>

  while (1)
  {


	  if(!(GPIOC->IDR & GPIO_IDR_ID13))                 //button read pin_C13
 800067c:	4b25      	ldr	r3, [pc, #148]	; (8000714 <main+0xac>)
 800067e:	691a      	ldr	r2, [r3, #16]
 8000680:	2380      	movs	r3, #128	; 0x80
 8000682:	019b      	lsls	r3, r3, #6
 8000684:	4013      	ands	r3, r2
 8000686:	d112      	bne.n	80006ae <main+0x46>
	  	  	  {
	  	  		while(!(GPIOC->IDR & GPIO_IDR_ID13));
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	4b22      	ldr	r3, [pc, #136]	; (8000714 <main+0xac>)
 800068c:	691a      	ldr	r2, [r3, #16]
 800068e:	2380      	movs	r3, #128	; 0x80
 8000690:	019b      	lsls	r3, r3, #6
 8000692:	4013      	ands	r3, r2
 8000694:	d0f9      	beq.n	800068a <main+0x22>


	  	  		if(receive_data_1 == 7)
 8000696:	4b20      	ldr	r3, [pc, #128]	; (8000718 <main+0xb0>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b07      	cmp	r3, #7
 800069c:	d107      	bne.n	80006ae <main+0x46>
	  	  			{
	  	  				GPIOA->ODR |= GPIO_ODR_OD5;
 800069e:	23a0      	movs	r3, #160	; 0xa0
 80006a0:	05db      	lsls	r3, r3, #23
 80006a2:	22a0      	movs	r2, #160	; 0xa0
 80006a4:	05d2      	lsls	r2, r2, #23
 80006a6:	6952      	ldr	r2, [r2, #20]
 80006a8:	2120      	movs	r1, #32
 80006aa:	430a      	orrs	r2, r1
 80006ac:	615a      	str	r2, [r3, #20]





	  if(!(GPIOC->IDR & GPIO_IDR_ID12))            //button read eeprom bank 101
 80006ae:	4b19      	ldr	r3, [pc, #100]	; (8000714 <main+0xac>)
 80006b0:	691a      	ldr	r2, [r3, #16]
 80006b2:	2380      	movs	r3, #128	; 0x80
 80006b4:	015b      	lsls	r3, r3, #5
 80006b6:	4013      	ands	r3, r2
 80006b8:	d1e0      	bne.n	800067c <main+0x14>
	  	  	  	  {
	  	  	  		while(!(GPIOC->IDR & GPIO_IDR_ID12));
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	4b15      	ldr	r3, [pc, #84]	; (8000714 <main+0xac>)
 80006be:	691a      	ldr	r2, [r3, #16]
 80006c0:	2380      	movs	r3, #128	; 0x80
 80006c2:	015b      	lsls	r3, r3, #5
 80006c4:	4013      	ands	r3, r2
 80006c6:	d0f9      	beq.n	80006bc <main+0x54>


	  	  	  		eeprom_read_adr();		       //read eeprom mem.reg.(0x65) value code
 80006c8:	f000 f82e 	bl	8000728 <eeprom_read_adr>


 	  	  	  		if(receive_data_2 == 6)
 80006cc:	4b13      	ldr	r3, [pc, #76]	; (800071c <main+0xb4>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b06      	cmp	r3, #6
 80006d2:	d108      	bne.n	80006e6 <main+0x7e>

	  	  	  		   {

	  	  	  		   	  GPIOA->ODR |= GPIO_ODR_OD5;
 80006d4:	23a0      	movs	r3, #160	; 0xa0
 80006d6:	05db      	lsls	r3, r3, #23
 80006d8:	22a0      	movs	r2, #160	; 0xa0
 80006da:	05d2      	lsls	r2, r2, #23
 80006dc:	6952      	ldr	r2, [r2, #20]
 80006de:	2120      	movs	r1, #32
 80006e0:	430a      	orrs	r2, r1
 80006e2:	615a      	str	r2, [r3, #20]
 80006e4:	e7ca      	b.n	800067c <main+0x14>
	  	  	  		else
	  	  	  		{

	  	  	  			while(1)						//error bank value
	  	  	  			{
	  	  	  			 GPIOA->ODR ^= (1<<5);
 80006e6:	23a0      	movs	r3, #160	; 0xa0
 80006e8:	05db      	lsls	r3, r3, #23
 80006ea:	22a0      	movs	r2, #160	; 0xa0
 80006ec:	05d2      	lsls	r2, r2, #23
 80006ee:	6952      	ldr	r2, [r2, #20]
 80006f0:	2120      	movs	r1, #32
 80006f2:	404a      	eors	r2, r1
 80006f4:	615a      	str	r2, [r3, #20]
	  	  	  			 for(i=0;i <=100000;i++);
 80006f6:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <main+0xb8>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	e004      	b.n	8000708 <main+0xa0>
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <main+0xb8>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	1c5a      	adds	r2, r3, #1
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <main+0xb8>)
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	4b05      	ldr	r3, [pc, #20]	; (8000720 <main+0xb8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a05      	ldr	r2, [pc, #20]	; (8000724 <main+0xbc>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d9f5      	bls.n	80006fe <main+0x96>
	  	  	  			 GPIOA->ODR ^= (1<<5);
 8000712:	e7e8      	b.n	80006e6 <main+0x7e>
 8000714:	50000800 	.word	0x50000800
 8000718:	200001ec 	.word	0x200001ec
 800071c:	200001ed 	.word	0x200001ed
 8000720:	200001f0 	.word	0x200001f0
 8000724:	000186a0 	.word	0x000186a0

08000728 <eeprom_read_adr>:
}



void eeprom_read_adr(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	/*----------------------------------SECOND STEP(read eeprom mem. addr.)---------------------*/
			I2C1->CR2 |= 0xA0;						// slave device addres
 800072c:	4b4c      	ldr	r3, [pc, #304]	; (8000860 <eeprom_read_adr+0x138>)
 800072e:	4a4c      	ldr	r2, [pc, #304]	; (8000860 <eeprom_read_adr+0x138>)
 8000730:	6852      	ldr	r2, [r2, #4]
 8000732:	21a0      	movs	r1, #160	; 0xa0
 8000734:	430a      	orrs	r2, r1
 8000736:	605a      	str	r2, [r3, #4]

			I2C1->CR2 &=~I2C_CR2_RD_WRN ;			// Master requests a write transfer.
 8000738:	4b49      	ldr	r3, [pc, #292]	; (8000860 <eeprom_read_adr+0x138>)
 800073a:	4a49      	ldr	r2, [pc, #292]	; (8000860 <eeprom_read_adr+0x138>)
 800073c:	6852      	ldr	r2, [r2, #4]
 800073e:	4949      	ldr	r1, [pc, #292]	; (8000864 <eeprom_read_adr+0x13c>)
 8000740:	400a      	ands	r2, r1
 8000742:	605a      	str	r2, [r3, #4]

			I2C1->CR2 &=~I2C_CR2_ADD10;			    // set adressing 7 bits
 8000744:	4b46      	ldr	r3, [pc, #280]	; (8000860 <eeprom_read_adr+0x138>)
 8000746:	4a46      	ldr	r2, [pc, #280]	; (8000860 <eeprom_read_adr+0x138>)
 8000748:	6852      	ldr	r2, [r2, #4]
 800074a:	4947      	ldr	r1, [pc, #284]	; (8000868 <eeprom_read_adr+0x140>)
 800074c:	400a      	ands	r2, r1
 800074e:	605a      	str	r2, [r3, #4]

			I2C1->CR2 &=~0x30000;
 8000750:	4b43      	ldr	r3, [pc, #268]	; (8000860 <eeprom_read_adr+0x138>)
 8000752:	4a43      	ldr	r2, [pc, #268]	; (8000860 <eeprom_read_adr+0x138>)
 8000754:	6852      	ldr	r2, [r2, #4]
 8000756:	4945      	ldr	r1, [pc, #276]	; (800086c <eeprom_read_adr+0x144>)
 8000758:	400a      	ands	r2, r1
 800075a:	605a      	str	r2, [r3, #4]
			I2C1->CR2 |= 0x20000;					// set send byte value=2
 800075c:	4b40      	ldr	r3, [pc, #256]	; (8000860 <eeprom_read_adr+0x138>)
 800075e:	4a40      	ldr	r2, [pc, #256]	; (8000860 <eeprom_read_adr+0x138>)
 8000760:	6852      	ldr	r2, [r2, #4]
 8000762:	2180      	movs	r1, #128	; 0x80
 8000764:	0289      	lsls	r1, r1, #10
 8000766:	430a      	orrs	r2, r1
 8000768:	605a      	str	r2, [r3, #4]

			I2C1->CR2 |=I2C_CR2_START;				//start generation
 800076a:	4b3d      	ldr	r3, [pc, #244]	; (8000860 <eeprom_read_adr+0x138>)
 800076c:	4a3c      	ldr	r2, [pc, #240]	; (8000860 <eeprom_read_adr+0x138>)
 800076e:	6852      	ldr	r2, [r2, #4]
 8000770:	2180      	movs	r1, #128	; 0x80
 8000772:	0189      	lsls	r1, r1, #6
 8000774:	430a      	orrs	r2, r1
 8000776:	605a      	str	r2, [r3, #4]

		/*--------------------------------------------------------------------------------------*/

			while(!(I2C1->ISR & I2C_ISR_BUSY));		//control i2c busy?
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	4b39      	ldr	r3, [pc, #228]	; (8000860 <eeprom_read_adr+0x138>)
 800077c:	699a      	ldr	r2, [r3, #24]
 800077e:	2380      	movs	r3, #128	; 0x80
 8000780:	021b      	lsls	r3, r3, #8
 8000782:	4013      	ands	r3, r2
 8000784:	d0f9      	beq.n	800077a <eeprom_read_adr+0x52>

			while(!(I2C1->ISR & I2C_ISR_TXE ));		//control TXD empty?
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	4b35      	ldr	r3, [pc, #212]	; (8000860 <eeprom_read_adr+0x138>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	2201      	movs	r2, #1
 800078e:	4013      	ands	r3, r2
 8000790:	d0fa      	beq.n	8000788 <eeprom_read_adr+0x60>

			I2C1->TXDR = 0x00;						//send byte eeprom memory high address
 8000792:	4b33      	ldr	r3, [pc, #204]	; (8000860 <eeprom_read_adr+0x138>)
 8000794:	2200      	movs	r2, #0
 8000796:	629a      	str	r2, [r3, #40]	; 0x28



			//while(!(I2C1->ISR)& I2C_)             //read ack status

			while(!(I2C1->ISR & I2C_ISR_BUSY));		//control i2c busy?
 8000798:	46c0      	nop			; (mov r8, r8)
 800079a:	4b31      	ldr	r3, [pc, #196]	; (8000860 <eeprom_read_adr+0x138>)
 800079c:	699a      	ldr	r2, [r3, #24]
 800079e:	2380      	movs	r3, #128	; 0x80
 80007a0:	021b      	lsls	r3, r3, #8
 80007a2:	4013      	ands	r3, r2
 80007a4:	d0f9      	beq.n	800079a <eeprom_read_adr+0x72>

			while(!(I2C1->ISR & I2C_ISR_TXE ));		//control TXD empty?
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	4b2d      	ldr	r3, [pc, #180]	; (8000860 <eeprom_read_adr+0x138>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	2201      	movs	r2, #1
 80007ae:	4013      	ands	r3, r2
 80007b0:	d0fa      	beq.n	80007a8 <eeprom_read_adr+0x80>


			I2C1->TXDR = 0x65;						//send byte eeprom memory low address
 80007b2:	4b2b      	ldr	r3, [pc, #172]	; (8000860 <eeprom_read_adr+0x138>)
 80007b4:	2265      	movs	r2, #101	; 0x65
 80007b6:	629a      	str	r2, [r3, #40]	; 0x28


			while(!(I2C1->ISR & I2C_ISR_BUSY));		//control i2c busy?
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	4b29      	ldr	r3, [pc, #164]	; (8000860 <eeprom_read_adr+0x138>)
 80007bc:	699a      	ldr	r2, [r3, #24]
 80007be:	2380      	movs	r3, #128	; 0x80
 80007c0:	021b      	lsls	r3, r3, #8
 80007c2:	4013      	ands	r3, r2
 80007c4:	d0f9      	beq.n	80007ba <eeprom_read_adr+0x92>

			while(!(I2C1->ISR & I2C_ISR_TXE ));		//control TXD empty?
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	4b25      	ldr	r3, [pc, #148]	; (8000860 <eeprom_read_adr+0x138>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	2201      	movs	r2, #1
 80007ce:	4013      	ands	r3, r2
 80007d0:	d0fa      	beq.n	80007c8 <eeprom_read_adr+0xa0>


		/*--------------------------ReStart for read eeprom mem. addr---------------------------*/

			I2C1->CR2 |= 0xA0;						// slave device addres
 80007d2:	4b23      	ldr	r3, [pc, #140]	; (8000860 <eeprom_read_adr+0x138>)
 80007d4:	4a22      	ldr	r2, [pc, #136]	; (8000860 <eeprom_read_adr+0x138>)
 80007d6:	6852      	ldr	r2, [r2, #4]
 80007d8:	21a0      	movs	r1, #160	; 0xa0
 80007da:	430a      	orrs	r2, r1
 80007dc:	605a      	str	r2, [r3, #4]

			I2C1->CR2 |= I2C_CR2_RD_WRN ;			// Master requests a read transfer.
 80007de:	4b20      	ldr	r3, [pc, #128]	; (8000860 <eeprom_read_adr+0x138>)
 80007e0:	4a1f      	ldr	r2, [pc, #124]	; (8000860 <eeprom_read_adr+0x138>)
 80007e2:	6852      	ldr	r2, [r2, #4]
 80007e4:	2180      	movs	r1, #128	; 0x80
 80007e6:	00c9      	lsls	r1, r1, #3
 80007e8:	430a      	orrs	r2, r1
 80007ea:	605a      	str	r2, [r3, #4]

			I2C1->CR2 &=~I2C_CR2_ADD10;				// set adressing 7 bits
 80007ec:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <eeprom_read_adr+0x138>)
 80007ee:	4a1c      	ldr	r2, [pc, #112]	; (8000860 <eeprom_read_adr+0x138>)
 80007f0:	6852      	ldr	r2, [r2, #4]
 80007f2:	491d      	ldr	r1, [pc, #116]	; (8000868 <eeprom_read_adr+0x140>)
 80007f4:	400a      	ands	r2, r1
 80007f6:	605a      	str	r2, [r3, #4]





			I2C1->CR2 &=~0x20000;					//clear NBYTES bit
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <eeprom_read_adr+0x138>)
 80007fa:	4a19      	ldr	r2, [pc, #100]	; (8000860 <eeprom_read_adr+0x138>)
 80007fc:	6852      	ldr	r2, [r2, #4]
 80007fe:	491c      	ldr	r1, [pc, #112]	; (8000870 <eeprom_read_adr+0x148>)
 8000800:	400a      	ands	r2, r1
 8000802:	605a      	str	r2, [r3, #4]
			I2C1->CR2 |= 0x10000;					// set to read value 1 byte
 8000804:	4b16      	ldr	r3, [pc, #88]	; (8000860 <eeprom_read_adr+0x138>)
 8000806:	4a16      	ldr	r2, [pc, #88]	; (8000860 <eeprom_read_adr+0x138>)
 8000808:	6852      	ldr	r2, [r2, #4]
 800080a:	2180      	movs	r1, #128	; 0x80
 800080c:	0249      	lsls	r1, r1, #9
 800080e:	430a      	orrs	r2, r1
 8000810:	605a      	str	r2, [r3, #4]


			I2C1->CR2 |=I2C_CR2_START;				//start generation
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <eeprom_read_adr+0x138>)
 8000814:	4a12      	ldr	r2, [pc, #72]	; (8000860 <eeprom_read_adr+0x138>)
 8000816:	6852      	ldr	r2, [r2, #4]
 8000818:	2180      	movs	r1, #128	; 0x80
 800081a:	0189      	lsls	r1, r1, #6
 800081c:	430a      	orrs	r2, r1
 800081e:	605a      	str	r2, [r3, #4]



			//while(!(I2C1->ISR & I2C_ISR_BUSY));		//control i2c busy?

			while(!(I2C1->ISR & I2C_ISR_RXNE));		//rxne empty flag
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <eeprom_read_adr+0x138>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	2204      	movs	r2, #4
 8000828:	4013      	ands	r3, r2
 800082a:	d0fa      	beq.n	8000822 <eeprom_read_adr+0xfa>

			receive_data_2 =atoi (&I2C1 -> RXDR);
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <eeprom_read_adr+0x14c>)
 800082e:	0018      	movs	r0, r3
 8000830:	f000 f88c 	bl	800094c <atoi>
 8000834:	0003      	movs	r3, r0
 8000836:	b2da      	uxtb	r2, r3
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <eeprom_read_adr+0x150>)
 800083a:	701a      	strb	r2, [r3, #0]

			I2C1->CR2 |= I2C_CR2_STOP;				//i2c1 stop
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <eeprom_read_adr+0x138>)
 800083e:	4a08      	ldr	r2, [pc, #32]	; (8000860 <eeprom_read_adr+0x138>)
 8000840:	6852      	ldr	r2, [r2, #4]
 8000842:	2180      	movs	r1, #128	; 0x80
 8000844:	01c9      	lsls	r1, r1, #7
 8000846:	430a      	orrs	r2, r1
 8000848:	605a      	str	r2, [r3, #4]

			while(I2C1->CR2 & I2C_CR2_STOP);        //wait for start flag
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <eeprom_read_adr+0x138>)
 800084e:	685a      	ldr	r2, [r3, #4]
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	01db      	lsls	r3, r3, #7
 8000854:	4013      	ands	r3, r2
 8000856:	d1f9      	bne.n	800084c <eeprom_read_adr+0x124>


		/*--------------------------------------------------------------------------------------*/


}
 8000858:	46c0      	nop			; (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	40005400 	.word	0x40005400
 8000864:	fffffbff 	.word	0xfffffbff
 8000868:	fffff7ff 	.word	0xfffff7ff
 800086c:	fffcffff 	.word	0xfffcffff
 8000870:	fffdffff 	.word	0xfffdffff
 8000874:	40005424 	.word	0x40005424
 8000878:	200001ed 	.word	0x200001ed

0800087c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 800087c:	480d      	ldr	r0, [pc, #52]	; (80008b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800087e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000880:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000882:	e003      	b.n	800088c <LoopCopyDataInit>

08000884 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8000886:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000888:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800088a:	3104      	adds	r1, #4

0800088c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800088c:	480b      	ldr	r0, [pc, #44]	; (80008bc <LoopForever+0xa>)
  ldr  r3, =_edata
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000890:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000892:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000894:	d3f6      	bcc.n	8000884 <CopyDataInit>
  ldr  r2, =_sbss
 8000896:	4a0b      	ldr	r2, [pc, #44]	; (80008c4 <LoopForever+0x12>)
  b  LoopFillZerobss
 8000898:	e002      	b.n	80008a0 <LoopFillZerobss>

0800089a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800089a:	2300      	movs	r3, #0
  str  r3, [r2]
 800089c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800089e:	3204      	adds	r2, #4

080008a0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <LoopForever+0x16>)
  cmp  r2, r3
 80008a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80008a4:	d3f9      	bcc.n	800089a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008a6:	f000 f813 	bl	80008d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008aa:	f000 f855 	bl	8000958 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ae:	f7ff fedb 	bl	8000668 <main>

080008b2 <LoopForever>:

LoopForever:
    b LoopForever
 80008b2:	e7fe      	b.n	80008b2 <LoopForever>
  ldr   r0, =_estack
 80008b4:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 80008b8:	08000c44 	.word	0x08000c44
  ldr  r0, =_sdata
 80008bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80008c0:	200001d0 	.word	0x200001d0
  ldr  r2, =_sbss
 80008c4:	200001d0 	.word	0x200001d0
  ldr  r3, = _ebss
 80008c8:	200001f4 	.word	0x200001f4

080008cc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008cc:	e7fe      	b.n	80008cc <ADC1_COMP_IRQHandler>
	...

080008d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80008d4:	4b17      	ldr	r3, [pc, #92]	; (8000934 <SystemInit+0x64>)
 80008d6:	4a17      	ldr	r2, [pc, #92]	; (8000934 <SystemInit+0x64>)
 80008d8:	6812      	ldr	r2, [r2, #0]
 80008da:	2180      	movs	r1, #128	; 0x80
 80008dc:	0049      	lsls	r1, r1, #1
 80008de:	430a      	orrs	r2, r1
 80008e0:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <SystemInit+0x64>)
 80008e4:	4a13      	ldr	r2, [pc, #76]	; (8000934 <SystemInit+0x64>)
 80008e6:	68d2      	ldr	r2, [r2, #12]
 80008e8:	4913      	ldr	r1, [pc, #76]	; (8000938 <SystemInit+0x68>)
 80008ea:	400a      	ands	r2, r1
 80008ec:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <SystemInit+0x64>)
 80008f0:	4a10      	ldr	r2, [pc, #64]	; (8000934 <SystemInit+0x64>)
 80008f2:	6812      	ldr	r2, [r2, #0]
 80008f4:	4911      	ldr	r1, [pc, #68]	; (800093c <SystemInit+0x6c>)
 80008f6:	400a      	ands	r2, r1
 80008f8:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <SystemInit+0x64>)
 80008fc:	4a0d      	ldr	r2, [pc, #52]	; (8000934 <SystemInit+0x64>)
 80008fe:	6892      	ldr	r2, [r2, #8]
 8000900:	2101      	movs	r1, #1
 8000902:	438a      	bics	r2, r1
 8000904:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <SystemInit+0x64>)
 8000908:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <SystemInit+0x64>)
 800090a:	6812      	ldr	r2, [r2, #0]
 800090c:	490c      	ldr	r1, [pc, #48]	; (8000940 <SystemInit+0x70>)
 800090e:	400a      	ands	r2, r1
 8000910:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <SystemInit+0x64>)
 8000914:	4a07      	ldr	r2, [pc, #28]	; (8000934 <SystemInit+0x64>)
 8000916:	68d2      	ldr	r2, [r2, #12]
 8000918:	490a      	ldr	r1, [pc, #40]	; (8000944 <SystemInit+0x74>)
 800091a:	400a      	ands	r2, r1
 800091c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800091e:	4b05      	ldr	r3, [pc, #20]	; (8000934 <SystemInit+0x64>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <SystemInit+0x78>)
 8000926:	2280      	movs	r2, #128	; 0x80
 8000928:	0512      	lsls	r2, r2, #20
 800092a:	609a      	str	r2, [r3, #8]
#endif
}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	40021000 	.word	0x40021000
 8000938:	88ff400c 	.word	0x88ff400c
 800093c:	fef6fff6 	.word	0xfef6fff6
 8000940:	fffbffff 	.word	0xfffbffff
 8000944:	ff02ffff 	.word	0xff02ffff
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <atoi>:
 800094c:	b510      	push	{r4, lr}
 800094e:	220a      	movs	r2, #10
 8000950:	2100      	movs	r1, #0
 8000952:	f000 f8ab 	bl	8000aac <strtol>
 8000956:	bd10      	pop	{r4, pc}

08000958 <__libc_init_array>:
 8000958:	b570      	push	{r4, r5, r6, lr}
 800095a:	2600      	movs	r6, #0
 800095c:	4d0c      	ldr	r5, [pc, #48]	; (8000990 <__libc_init_array+0x38>)
 800095e:	4c0d      	ldr	r4, [pc, #52]	; (8000994 <__libc_init_array+0x3c>)
 8000960:	1b64      	subs	r4, r4, r5
 8000962:	10a4      	asrs	r4, r4, #2
 8000964:	42a6      	cmp	r6, r4
 8000966:	d109      	bne.n	800097c <__libc_init_array+0x24>
 8000968:	2600      	movs	r6, #0
 800096a:	f000 f8d5 	bl	8000b18 <_init>
 800096e:	4d0a      	ldr	r5, [pc, #40]	; (8000998 <__libc_init_array+0x40>)
 8000970:	4c0a      	ldr	r4, [pc, #40]	; (800099c <__libc_init_array+0x44>)
 8000972:	1b64      	subs	r4, r4, r5
 8000974:	10a4      	asrs	r4, r4, #2
 8000976:	42a6      	cmp	r6, r4
 8000978:	d105      	bne.n	8000986 <__libc_init_array+0x2e>
 800097a:	bd70      	pop	{r4, r5, r6, pc}
 800097c:	00b3      	lsls	r3, r6, #2
 800097e:	58eb      	ldr	r3, [r5, r3]
 8000980:	4798      	blx	r3
 8000982:	3601      	adds	r6, #1
 8000984:	e7ee      	b.n	8000964 <__libc_init_array+0xc>
 8000986:	00b3      	lsls	r3, r6, #2
 8000988:	58eb      	ldr	r3, [r5, r3]
 800098a:	4798      	blx	r3
 800098c:	3601      	adds	r6, #1
 800098e:	e7f2      	b.n	8000976 <__libc_init_array+0x1e>
 8000990:	08000c3c 	.word	0x08000c3c
 8000994:	08000c3c 	.word	0x08000c3c
 8000998:	08000c3c 	.word	0x08000c3c
 800099c:	08000c40 	.word	0x08000c40

080009a0 <_strtol_l.isra.0>:
 80009a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009a2:	001f      	movs	r7, r3
 80009a4:	000e      	movs	r6, r1
 80009a6:	b087      	sub	sp, #28
 80009a8:	9005      	str	r0, [sp, #20]
 80009aa:	9103      	str	r1, [sp, #12]
 80009ac:	9202      	str	r2, [sp, #8]
 80009ae:	980c      	ldr	r0, [sp, #48]	; 0x30
 80009b0:	7834      	ldrb	r4, [r6, #0]
 80009b2:	f000 f88f 	bl	8000ad4 <__locale_ctype_ptr_l>
 80009b6:	2208      	movs	r2, #8
 80009b8:	1900      	adds	r0, r0, r4
 80009ba:	7843      	ldrb	r3, [r0, #1]
 80009bc:	1c75      	adds	r5, r6, #1
 80009be:	4013      	ands	r3, r2
 80009c0:	d10c      	bne.n	80009dc <_strtol_l.isra.0+0x3c>
 80009c2:	2c2d      	cmp	r4, #45	; 0x2d
 80009c4:	d10c      	bne.n	80009e0 <_strtol_l.isra.0+0x40>
 80009c6:	3301      	adds	r3, #1
 80009c8:	782c      	ldrb	r4, [r5, #0]
 80009ca:	9301      	str	r3, [sp, #4]
 80009cc:	1cb5      	adds	r5, r6, #2
 80009ce:	2f00      	cmp	r7, #0
 80009d0:	d00c      	beq.n	80009ec <_strtol_l.isra.0+0x4c>
 80009d2:	2f10      	cmp	r7, #16
 80009d4:	d114      	bne.n	8000a00 <_strtol_l.isra.0+0x60>
 80009d6:	2c30      	cmp	r4, #48	; 0x30
 80009d8:	d00a      	beq.n	80009f0 <_strtol_l.isra.0+0x50>
 80009da:	e011      	b.n	8000a00 <_strtol_l.isra.0+0x60>
 80009dc:	002e      	movs	r6, r5
 80009de:	e7e6      	b.n	80009ae <_strtol_l.isra.0+0xe>
 80009e0:	9301      	str	r3, [sp, #4]
 80009e2:	2c2b      	cmp	r4, #43	; 0x2b
 80009e4:	d1f3      	bne.n	80009ce <_strtol_l.isra.0+0x2e>
 80009e6:	782c      	ldrb	r4, [r5, #0]
 80009e8:	1cb5      	adds	r5, r6, #2
 80009ea:	e7f0      	b.n	80009ce <_strtol_l.isra.0+0x2e>
 80009ec:	2c30      	cmp	r4, #48	; 0x30
 80009ee:	d12f      	bne.n	8000a50 <_strtol_l.isra.0+0xb0>
 80009f0:	2220      	movs	r2, #32
 80009f2:	782b      	ldrb	r3, [r5, #0]
 80009f4:	4393      	bics	r3, r2
 80009f6:	2b58      	cmp	r3, #88	; 0x58
 80009f8:	d151      	bne.n	8000a9e <_strtol_l.isra.0+0xfe>
 80009fa:	2710      	movs	r7, #16
 80009fc:	786c      	ldrb	r4, [r5, #1]
 80009fe:	3502      	adds	r5, #2
 8000a00:	9b01      	ldr	r3, [sp, #4]
 8000a02:	4a29      	ldr	r2, [pc, #164]	; (8000aa8 <_strtol_l.isra.0+0x108>)
 8000a04:	0039      	movs	r1, r7
 8000a06:	189e      	adds	r6, r3, r2
 8000a08:	0030      	movs	r0, r6
 8000a0a:	f7ff fc03 	bl	8000214 <__aeabi_uidivmod>
 8000a0e:	0030      	movs	r0, r6
 8000a10:	9104      	str	r1, [sp, #16]
 8000a12:	0039      	movs	r1, r7
 8000a14:	f7ff fb78 	bl	8000108 <__udivsi3>
 8000a18:	2101      	movs	r1, #1
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	4249      	negs	r1, r1
 8000a1e:	0002      	movs	r2, r0
 8000a20:	468c      	mov	ip, r1
 8000a22:	0018      	movs	r0, r3
 8000a24:	0021      	movs	r1, r4
 8000a26:	3930      	subs	r1, #48	; 0x30
 8000a28:	2909      	cmp	r1, #9
 8000a2a:	d813      	bhi.n	8000a54 <_strtol_l.isra.0+0xb4>
 8000a2c:	000c      	movs	r4, r1
 8000a2e:	42a7      	cmp	r7, r4
 8000a30:	dd1c      	ble.n	8000a6c <_strtol_l.isra.0+0xcc>
 8000a32:	1c59      	adds	r1, r3, #1
 8000a34:	d009      	beq.n	8000a4a <_strtol_l.isra.0+0xaa>
 8000a36:	4663      	mov	r3, ip
 8000a38:	4282      	cmp	r2, r0
 8000a3a:	d306      	bcc.n	8000a4a <_strtol_l.isra.0+0xaa>
 8000a3c:	d102      	bne.n	8000a44 <_strtol_l.isra.0+0xa4>
 8000a3e:	9904      	ldr	r1, [sp, #16]
 8000a40:	42a1      	cmp	r1, r4
 8000a42:	db02      	blt.n	8000a4a <_strtol_l.isra.0+0xaa>
 8000a44:	2301      	movs	r3, #1
 8000a46:	4378      	muls	r0, r7
 8000a48:	1820      	adds	r0, r4, r0
 8000a4a:	782c      	ldrb	r4, [r5, #0]
 8000a4c:	3501      	adds	r5, #1
 8000a4e:	e7e9      	b.n	8000a24 <_strtol_l.isra.0+0x84>
 8000a50:	270a      	movs	r7, #10
 8000a52:	e7d5      	b.n	8000a00 <_strtol_l.isra.0+0x60>
 8000a54:	0021      	movs	r1, r4
 8000a56:	3941      	subs	r1, #65	; 0x41
 8000a58:	2919      	cmp	r1, #25
 8000a5a:	d801      	bhi.n	8000a60 <_strtol_l.isra.0+0xc0>
 8000a5c:	3c37      	subs	r4, #55	; 0x37
 8000a5e:	e7e6      	b.n	8000a2e <_strtol_l.isra.0+0x8e>
 8000a60:	0021      	movs	r1, r4
 8000a62:	3961      	subs	r1, #97	; 0x61
 8000a64:	2919      	cmp	r1, #25
 8000a66:	d801      	bhi.n	8000a6c <_strtol_l.isra.0+0xcc>
 8000a68:	3c57      	subs	r4, #87	; 0x57
 8000a6a:	e7e0      	b.n	8000a2e <_strtol_l.isra.0+0x8e>
 8000a6c:	1c5a      	adds	r2, r3, #1
 8000a6e:	d108      	bne.n	8000a82 <_strtol_l.isra.0+0xe2>
 8000a70:	9a05      	ldr	r2, [sp, #20]
 8000a72:	3323      	adds	r3, #35	; 0x23
 8000a74:	6013      	str	r3, [r2, #0]
 8000a76:	9b02      	ldr	r3, [sp, #8]
 8000a78:	0030      	movs	r0, r6
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d10b      	bne.n	8000a96 <_strtol_l.isra.0+0xf6>
 8000a7e:	b007      	add	sp, #28
 8000a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a82:	9a01      	ldr	r2, [sp, #4]
 8000a84:	2a00      	cmp	r2, #0
 8000a86:	d000      	beq.n	8000a8a <_strtol_l.isra.0+0xea>
 8000a88:	4240      	negs	r0, r0
 8000a8a:	9a02      	ldr	r2, [sp, #8]
 8000a8c:	2a00      	cmp	r2, #0
 8000a8e:	d0f6      	beq.n	8000a7e <_strtol_l.isra.0+0xde>
 8000a90:	9a03      	ldr	r2, [sp, #12]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d000      	beq.n	8000a98 <_strtol_l.isra.0+0xf8>
 8000a96:	1e6a      	subs	r2, r5, #1
 8000a98:	9b02      	ldr	r3, [sp, #8]
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	e7ef      	b.n	8000a7e <_strtol_l.isra.0+0xde>
 8000a9e:	2430      	movs	r4, #48	; 0x30
 8000aa0:	2f00      	cmp	r7, #0
 8000aa2:	d1ad      	bne.n	8000a00 <_strtol_l.isra.0+0x60>
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	e7ab      	b.n	8000a00 <_strtol_l.isra.0+0x60>
 8000aa8:	7fffffff 	.word	0x7fffffff

08000aac <strtol>:
 8000aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000aae:	0013      	movs	r3, r2
 8000ab0:	4a06      	ldr	r2, [pc, #24]	; (8000acc <strtol+0x20>)
 8000ab2:	0005      	movs	r5, r0
 8000ab4:	6810      	ldr	r0, [r2, #0]
 8000ab6:	6a04      	ldr	r4, [r0, #32]
 8000ab8:	2c00      	cmp	r4, #0
 8000aba:	d100      	bne.n	8000abe <strtol+0x12>
 8000abc:	4c04      	ldr	r4, [pc, #16]	; (8000ad0 <strtol+0x24>)
 8000abe:	000a      	movs	r2, r1
 8000ac0:	9400      	str	r4, [sp, #0]
 8000ac2:	0029      	movs	r1, r5
 8000ac4:	f7ff ff6c 	bl	80009a0 <_strtol_l.isra.0>
 8000ac8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	20000064 	.word	0x20000064

08000ad4 <__locale_ctype_ptr_l>:
 8000ad4:	30ec      	adds	r0, #236	; 0xec
 8000ad6:	6800      	ldr	r0, [r0, #0]
 8000ad8:	4770      	bx	lr

08000ada <__ascii_mbtowc>:
 8000ada:	b082      	sub	sp, #8
 8000adc:	2900      	cmp	r1, #0
 8000ade:	d100      	bne.n	8000ae2 <__ascii_mbtowc+0x8>
 8000ae0:	a901      	add	r1, sp, #4
 8000ae2:	1e10      	subs	r0, r2, #0
 8000ae4:	d006      	beq.n	8000af4 <__ascii_mbtowc+0x1a>
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d006      	beq.n	8000af8 <__ascii_mbtowc+0x1e>
 8000aea:	7813      	ldrb	r3, [r2, #0]
 8000aec:	600b      	str	r3, [r1, #0]
 8000aee:	7810      	ldrb	r0, [r2, #0]
 8000af0:	1e43      	subs	r3, r0, #1
 8000af2:	4198      	sbcs	r0, r3
 8000af4:	b002      	add	sp, #8
 8000af6:	4770      	bx	lr
 8000af8:	2002      	movs	r0, #2
 8000afa:	4240      	negs	r0, r0
 8000afc:	e7fa      	b.n	8000af4 <__ascii_mbtowc+0x1a>

08000afe <__ascii_wctomb>:
 8000afe:	1e0b      	subs	r3, r1, #0
 8000b00:	d004      	beq.n	8000b0c <__ascii_wctomb+0xe>
 8000b02:	2aff      	cmp	r2, #255	; 0xff
 8000b04:	d904      	bls.n	8000b10 <__ascii_wctomb+0x12>
 8000b06:	238a      	movs	r3, #138	; 0x8a
 8000b08:	6003      	str	r3, [r0, #0]
 8000b0a:	3b8b      	subs	r3, #139	; 0x8b
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	4770      	bx	lr
 8000b10:	700a      	strb	r2, [r1, #0]
 8000b12:	2301      	movs	r3, #1
 8000b14:	e7fa      	b.n	8000b0c <__ascii_wctomb+0xe>
	...

08000b18 <_init>:
 8000b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b1e:	bc08      	pop	{r3}
 8000b20:	469e      	mov	lr, r3
 8000b22:	4770      	bx	lr

08000b24 <_fini>:
 8000b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b2a:	bc08      	pop	{r3}
 8000b2c:	469e      	mov	lr, r3
 8000b2e:	4770      	bx	lr
